.Net build
    - To build the project: dotnet run --project .\services\greetings\greetings.csproj 

Docker:
    - To build the image and start the container: 
    - docker images
    - docker ps -a
    - docker stop containerid

Scenarios
Demo1
    cd to Demo1\App folder
    Run command: docker build . -t counter-img:v1.0
    Run comamnd: docker run --name counter-container --rm -i -t counter-img:v1.0 5 bash
        This will run the image in the container and destroy the container once finished

Demo2
    - An image hosted in single container
        docker-compose up -d --build

Demo3
    - Multiple containers with the same image behind load balancer
        - docker-compose up --scale service=3 -> service is the service name specified in the docket compose file
        - Not able to mount volumes in C:. Had to change the disk location in Docker setup to an empty folder in D:
        - To mount on C: or D:, permission for docker-compose to be provided in settings.json file. (C:\Users\praveen_balanagendra\AppData\Roaming\Docker\settings.json)
            "filesharingDirectories": ["C:", "%USERPROFILE%", "D:"]
            Restart the Docker Desktop

Demo4
    - UI container with service layer container
        Build the angular project using "npm build --prod" command
        Run command docker-compose up -d --build using the docker compose for Demo4

Demo5
    - Multi Container -> Communicating via messaging layer.
    Using Rabbitmq messaging service
    Run command docker-compose up -d --build using the docker compose for Demo5


    
    - Application Gateway: Combining one single request with multiple api calls
    
    - Common Login service
    - Two images, each one hosted in multiple container and load balancer setup
    - Docker Swarm or Kubernetes
    - Multi Container -> Communication between them using Docker Network.
        Different types of Docker Network: Bridge (Stand alone), Overlay (Multiple Docker Host. Docker Swarm scenarion), Host (Use Docker Host network), Macvlan (Communicate via Mac address. Each container is a device in the network. 
        
        Demostration of Overlay network